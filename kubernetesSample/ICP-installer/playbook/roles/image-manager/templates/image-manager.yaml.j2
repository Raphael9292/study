---
apiVersion: v1
kind: Service
metadata:
  labels:
    kubernetes.io/cluster-service: 'true'
    kubernetes.io/name: image-manager
  name: image-manager
  namespace: kube-system
spec:
  clusterIP: "{{ image_manager_service_ip }}"
  ports:
    - name: image-manager
      port: 8600
      targetPort: 8600
    - name: registry
      port: 8500
      targetPort: 8500
  selector:
    app: image-manager

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: image-manager-token
  namespace: kube-system
  annotations:
    kubernetes.io/ingress.class: "ibm-icp-management"
    icp.management.ibm.com/secure-backends: "true"
spec:
  rules:
    - http:
        paths:
          - path: /image-manager/api/v1/auth/token
            backend:
              serviceName: image-manager
              servicePort: 8600

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: image-manager
  namespace: kube-system
  annotations:
    kubernetes.io/ingress.class: "ibm-icp-management"
    icp.management.ibm.com/auth-type: "id-token"
    icp.management.ibm.com/secure-backends: "true"
spec:
  rules:
    - http:
        paths:
          - path: /image-manager/api/v1
            backend:
              serviceName: image-manager
              servicePort: 8600

---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  labels:
    app: image-manager
    kubernetes.io/cluster-service: "true"
  name: image-manager
  namespace: kube-system
spec:
  updateStrategy:
    type: RollingUpdate
  serviceName: image-manager
  podManagementPolicy: "Parallel"
  replicas: {{ master_num }}
  template:
    metadata:
      labels:
        app: image-manager
      annotations:
        pod.alpha.kubernetes.io/initialized: "true"
        scheduler.alpha.kubernetes.io/critical-pod: ""
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      priorityClassName: system-cluster-critical
      containers:
        - image: "{{ image_registry_image }}"
          imagePullPolicy: IfNotPresent
          name: icp-registry
          ports:
            - containerPort: 8500
          livenessProbe:
            exec:
              command:
                - cat
                - /var/lib/registry/file-check
          readinessProbe:
            exec:
              command:
                - cat
                - /var/lib/registry/file-check
          env:
            - name: REGISTRY_HTTP_SECRET
              value: "{{ registry_secret.stdout }}"
            - name: FIPS_ENABLED
              value: "{{ fips_enabled | lower }}"
          volumeMounts:
            - mountPath: "/path/to/x509/public"
              name: im-certs
              subPath: tls.crt
            - mountPath: "/path/to/x509/private"
              name: im-certs
              subPath: tls.key
            - mountPath: "/etc/docker/registry/config.yml"
              name: registry-config
              subPath: registry-config.yaml
            - mountPath: "/var/lib/registry"
              name: image-manager
            - mountPath: /root/certs/bundle
              name: registry-certs
              subPath: rootcertbundle
          resources:
{{ image_registry_resources |  to_nice_yaml | indent(indentfirst=true,width=12) }}
        - image: "{{ image_manager_image }}"
          name: image-manager
          imagePullPolicy: IfNotPresent
          command:
            - "/icp-image-manager"
            - serve
            - "--listen-address=0.0.0.0:8600"
            - "--private-key-path=/root/certs/bundle.key"
            - "--oidc-url=https://platform-identity-provider:4300"
            - "--registry-url=https://127.0.0.1:8500"
            - "--registry-server-name={{ cluster_CA_domain }}:8500"
            - "--enable-https=true"
          env:
            - name: FIPS_ENABLED
              value: "{{ fips_enabled | lower }}"
          volumeMounts:
            - mountPath: /etc/icp-image-manager
              name: im-certs
            - mountPath: /root/certs/bundle.key
              name: registry-certs
              subPath: rootcertbundle.key
          resources:
{{ image_manager_resources |  to_nice_yaml | indent(indentfirst=true,width=12) }}
      volumes:
        - name: im-certs
          secret:
            secretName: router-certs
        - name: registry-certs
          secret:
            secretName: registry-certs
        - name: registry-config
          configMap:
            name: registry-config
      nodeSelector:
        master: 'true'
      tolerations:
        - key: "dedicated"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "CriticalAddonsOnly"
          operator: "Exists"
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
        - effect: NoSchedule
          key: node.kubernetes.io/not-ready
          operator: Exists
  volumeClaimTemplates:
    - metadata:
        name: image-manager
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi
        storageClassName: image-manager-storage
